AWSTemplateFormatVersion: "2010-09-09"
Description: "ALB"

Parameters:
    Prefix:
        Type: String
        Description: Fill in the prefix to give a unique name to all resources.

Resources:
    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Sub ${Prefix}-alb
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
                - !ImportValue
                  "Fn::Sub": "${Prefix}-SubnetId1"
                - !ImportValue
                  "Fn::Sub": "${Prefix}-SubnetId4"
            SecurityGroups:
                - !Ref ALBSecurityGroup1
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
                - Key: "access_logs.s3.enabled"
                  Value: "false"
                - Key: "idle_timeout.timeout_seconds"
                  Value: "60"
                - Key: "deletion_protection.enabled"
                  Value: "false"
                - Key: "routing.http2.enabled"
                  Value: "true"
                - Key: "routing.http.drop_invalid_header_fields.enabled"
                  Value: "false"
                - Key: "routing.http.xff_client_port.enabled"
                  Value: "false"
                - Key: "routing.http.preserve_host_header.enabled"
                  Value: "false"
                - Key: "routing.http.xff_header_processing.mode"
                  Value: "append"
                - Key: "load_balancing.cross_zone.enabled"
                  Value: "true"
                - Key: "routing.http.desync_mitigation_mode"
                  Value: "defensive"
                - Key: "waf.fail_open.enabled"
                  Value: "false"
                - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                  Value: "false"

    ElasticLoadBalancingV2Listener1:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
                - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup1
                  Type: "forward"

    ElasticLoadBalancingV2TargetGroup1:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !ImportValue
                "Fn::Sub": "${Prefix}-VPCID"
            Name: !Sub ${Prefix}-alb-targetgroup1
            HealthCheckEnabled: true
            TargetGroupAttributes:
                - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                  Value: "1"
                - Key: "stickiness.enabled"
                  Value: "false"
                - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                  Value: "off"
                - Key: "deregistration_delay.timeout_seconds"
                  Value: "300"
                - Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                  Value: "1"
                - Key: "stickiness.app_cookie.cookie_name"
                  Value: ""
                - Key: "stickiness.type"
                  Value: "lb_cookie"
                - Key: "stickiness.lb_cookie.duration_seconds"
                  Value: "86400"
                - Key: "slow_start.duration_seconds"
                  Value: "0"
                - Key: "stickiness.app_cookie.duration_seconds"
                  Value: "86400"
                - Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                  Value: "off"
                - Key: "load_balancing.cross_zone.enabled"
                  Value: "use_load_balancer_configuration"
                - Key: "load_balancing.algorithm.type"
                  Value: "round_robin"
            Targets:
                - Id: !ImportValue
                      "Fn::Sub": "${Prefix}-InstanceId"
                  Port: 8080

    ALBSecurityGroup1:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "alb-securitygroup1"
            VpcId: !ImportValue
                "Fn::Sub": "${Prefix}-VPCID"
            SecurityGroupIngress:
                - CidrIp: "0.0.0.0/0"
                  FromPort: 80
                  IpProtocol: "tcp"
                  ToPort: 80
            SecurityGroupEgress:
                - CidrIp: "0.0.0.0/0"
                  IpProtocol: "-1"

Outputs:
    AlbDnsName:
        Description: "DNS Name of the Application Load Balancer"
        Value: !GetAtt ElasticLoadBalancingV2LoadBalancer.DNSName
