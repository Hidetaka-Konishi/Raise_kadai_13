version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0

executors:
  my-executor:
    docker:
      - image: circleci/python:3.10

jobs:
  deploy-vpc:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation VPC Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-vpc.yml \
              --stack-name raise13-vpc \
              --parameter-overrides Prefix=raise13-vpc \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get Region of VPC
          command: |
            REGION=$(aws cloudformation describe-stacks \
              --stack-name raise13-vpc \
              --query 'Stacks[0].Outputs[?OutputKey==`RegionName`].OutputValue' \
              --output text)
            echo "export REGION=$REGION" >> $BASH_ENV


  deploy-ec2:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation EC2 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-ec2.yml \
              --stack-name raise13-ec2 \
              --parameter-overrides Prefix=raise13-ec2 VPCPrefix=raise13-vpc \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: Get Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV


  deploy-rds:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation RDS Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-rds.yml \
              --stack-name raise13-rds \
              --parameter-overrides Prefix=raise13-rds VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2 \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 30m
      - run:
          name: Get RDS ENDPOINT of RDS
          command: |
            RDS_ENDPOINT=$(aws cloudformation describe-stacks \
              --stack-name raise13-rds \
              --query 'Stacks[0].Outputs[?OutputKey==`RDSInstanceEndpoint`].OutputValue' \
              --output text)
            echo "export RDS_ENDPOINT=$RDS_ENDPOINT" >> $BASH_ENV

  deploy-alb:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation ALB Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-alb.yml \
              --stack-name raise13-alb \
              --parameter-overrides Prefix=raise13-alb VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get DNS Name of ALB
          command: |
            ALB_DNS_NAME=$(aws cloudformation describe-stacks \
              --stack-name raise13-alb \
              --query 'Stacks[0].Outputs[?OutputKey==`AlbDnsName`].OutputValue' \
              --output text)
            echo "export ALB_DNS_NAME=$ALB_DNS_NAME" >> $BASH_ENV


  deploy-s3:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation S3 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-s3.yml \
              --stack-name raise13-s3 \
              --parameter-overrides Prefix=raise13-s3 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get S3 Bucket Name of S3
          command: |
            S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
              --stack-name raise13-s3 \
              --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
              --output text)
            echo "export S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $BASH_ENV


  run-ansible:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - add_ssh_keys:
          fingerprints: "43:28:09:65:e3:c2:b2:30:81:95:c1:f2:30:f3:8d:a3"
      - run:
          name: Get Region of VPC
          command: |
            REGION=$(aws cloudformation describe-stacks \
              --stack-name raise13-vpc \
              --query 'Stacks[0].Outputs[?OutputKey==`RegionName`].OutputValue' \
              --output text)
            echo "export REGION=$REGION" >> $BASH_ENV
      - run:
          name: Retrieve Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV
      - run:
          name: Get RDS ENDPOINT of RDS
          command: |
            RDS_ENDPOINT=$(aws cloudformation describe-stacks \
              --stack-name raise13-rds \
              --query 'Stacks[0].Outputs[?OutputKey==`RDSInstanceEndpoint`].OutputValue' \
              --output text)
            echo "export RDS_ENDPOINT=$RDS_ENDPOINT" >> $BASH_ENV
      - run:
          name: Retrieve ALB DNS Name
          command: |
            ALB_DNS_NAME=$(aws cloudformation describe-stacks \
              --stack-name raise13-alb \
              --query 'Stacks[0].Outputs[?OutputKey==`AlbDnsName`].OutputValue' \
              --output text)
            echo "export ALB_DNS_NAME=$ALB_DNS_NAME" >> $BASH_ENV
      - run:
          name: Retrieve S3 Bucket Name
          command: |
            S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
              --stack-name raise13-s3 \
              --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
              --output text)
            echo "export S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $BASH_ENV
      - run:
          name: Install Ansible and AWS dependencies
          command: pip install ansible boto3 botocore
      - run:
          name: Update Ansible Inventory
          command: |
            echo "[your_target_host_or_group]" > ansible/inventory.ini
            echo "$INSTANCE_PUBLIC_IP ansible_ssh_user=ec2-user" >> ansible/inventory.ini
            echo "[your_target_host_or_group:vars]" >> ansible/inventory.ini
            echo "rds_endpoint=$RDS_ENDPOINT" >> ansible/inventory.ini
            echo "alb_dns_name=$ALB_DNS_NAME" >> ansible/inventory.ini
            echo "s3_buket_name=$S3_BUCKET_NAME" >> ansible/inventory.ini
            echo "region=$REGION" >> ansible/inventory.ini
            echo "ruby_version=3.1.2" >> ansible/inventory.ini
            echo "bundler_version=2.3.14" >> ansible/inventory.ini
            echo "nvm_version=0.39.5" >> ansible/inventory.ini
            echo "nodejs_version=17.9.1" >> ansible/inventory.ini
      - run:
          name: Run Ansible Playbook
          command: |
            export ANSIBLE_SSH_ARGS='-o StrictHostKeyChecking=no'
            ansible-playbook -i ansible/inventory.ini ansible/picture_upload_play.yml


workflows:
  version: 2
  deploy:
    jobs:
      - deploy-vpc
      - deploy-ec2:
          requires:
            - deploy-vpc
      - deploy-rds:
          requires:
            - deploy-ec2
      - deploy-alb:
          requires:
            - deploy-rds
      - deploy-s3:
          requires:
            - deploy-alb     
      - run-ansible:
          requires:
            - deploy-s3