version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0

executors:
  my-executor:
    docker:
      - image: circleci/python:3.10

jobs:
  deploy-vpc:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation VPC Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-vpc.yml \
              --stack-name raise13-vpc \
              --parameter-overrides Prefix=raise13-vpc


  deploy-ec2:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation EC2 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-ec2.yml \
              --stack-name raise13-ec2 \
              --parameter-overrides Prefix=raise13-ec2 VPCPrefix=raise13-vpc

      - run:
          name: Get Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV


  deploy-rds:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation RDS Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-rds.yml \
              --stack-name raise13-rds \
              --parameter-overrides Prefix=raise13-rds VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2
          no_output_timeout: 20m


  deploy-alb:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation ALB Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-alb.yml \
              --stack-name raise13-alb \
              --parameter-overrides Prefix=raise13-alb VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2


  deploy-s3:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation S3 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-s3.yml \
              --stack-name raise13-s3 \
              --parameter-overrides Prefix=raise13-s3


  run-ansible:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - "43:28:09:65:e3:c2:b2:30:81:95:c1:f2:30:f3:8d:a3"
      - run:
          name: Retrieve Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV
      - run:
          name: Install Ansible
          command: pip install ansible
      - run:
          name: Update Ansible Inventory
          command: |
            echo "[your_target_host_or_group]" > ansible/inventory.ini
            echo "$INSTANCE_PUBLIC_IP ansible_ssh_user=ec2-user" >> ansible/inventory.ini
            echo "[your_target_host_or_group:vars]" >> ansible/inventory.ini
            echo "ruby_version=3.1.2" >> ansible/inventory.ini
            echo "bundler_version=2.3.14" >> ansible/inventory.ini
            echo "nvm_version=0.39.5" >> ansible/inventory.ini
            echo "nodejs_version=17.9.1" >> ansible/inventory.ini
      - run:
          name: Run Ansible Playbook
          command: |
            export ANSIBLE_SSH_ARGS='-o StrictHostKeyChecking=no'
            ansible-playbook -i ansible/inventory.ini ansible/picture_upload_play.yml


  execute_serverspec:
    docker:
      - image: circleci/ruby:2.6-node
    steps:
      - checkout
      - run:
          name: Update RubyGems
          command: gem update --system 3.2.3
      - run:
          name: Set environment variables for ServerSpec
          command: echo "export TARGET_HOST=$INSTANCE_PUBLIC_IP" >> $BASH_ENV
      - run:
          name: Install dependencies for ServerSpec
          command: |
            gem install bundler
            bundle config set --local path 'vendor/bundle'
            bundle install
      - run:
          name: Execute ServerSpec
          command: |
            cd raisetech-live8-sample-app
            echo
            echo "テストコードの結果："
            bundle exec rake spec
          environment:
            RAILS_ENV: test


workflows:
  version: 2
  deploy:
    jobs:
      - deploy-vpc
      - deploy-ec2:
          requires:
            - deploy-vpc
      - deploy-rds:
          requires:
            - deploy-ec2
      - deploy-alb:
          requires:
            - deploy-rds
      - deploy-s3:
          requires:
            - deploy-alb     
      - run-ansible:
          requires:
            - deploy-s3
      - execute_serverspec:
          requires:
            - run-ansible