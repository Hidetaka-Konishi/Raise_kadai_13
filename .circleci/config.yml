version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0
  ansible-playbook: orbss/ansible-playbook@0.0.5  # ansible-playbook orbを追加

executors:
  my-executor:
    docker:
      - image: circleci/python:3.10

jobs:
  deploy-vpc:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation VPC Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-vpc.yml \
              --stack-name raise13-vpc \
              --parameter-overrides Prefix=raise13-vpc


  deploy-ec2:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation EC2 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-ec2.yml \
              --stack-name raise13-ec2 \
              --parameter-overrides Prefix=raise13-ec2 VPCPrefix=raise13-vpc

      - run:
          name: Get Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV


  add-ssh-key:
    executor: my-executor
    steps:
      - run:
          name: Add SSH Key
          command: |
            # 環境変数を設定
            export CIRCLECI_TOKEN="${SSH_KEY}"
            export CIRCLECI_PROJECT="auto-aws-13"
            export CIRCLECI_USERNAME="Hidetaka-Konishi"
            export EC2_PUBLIC_IP=$(aws cloudformation describe-stacks \
                          --stack-name raise13-ec2 \
                          --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
                          --output text)
            echo "$EC2_ACCESS_PRIVATE_KEY" > temporary_key_file

            # CircleCIのAPIを使用してSSHキーを追加
            curl -X POST https://circleci.com/api/v1.1/project/gh/$CIRCLECI_USERNAME/$CIRCLECI_PROJECT/ssh-key \
              -H 'Content-Type: application/json' \
              -H 'Circle-Token: '$CIRCLECI_TOKEN \
              -d @<(echo '{
              "hostname": "'$EC2_PUBLIC_IP'",
              "private_key": "'"$(cat temporary_key_file)"'"
            }')

  deploy-rds:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation RDS Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-rds.yml \
              --stack-name raise13-rds \
              --parameter-overrides Prefix=raise13-rds VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2
          no_output_timeout: 20m


  deploy-alb:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation ALB Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-alb.yml \
              --stack-name raise13-alb \
              --parameter-overrides Prefix=raise13-alb VPCPrefix=raise13-vpc EC2Prefix=raise13-ec2


  deploy-s3:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Deploy CloudFormation S3 Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/picture-upload-s3.yml \
              --stack-name raise13-s3 \
              --parameter-overrides Prefix=raise13-s3


  run-ansible:
    executor: my-executor
    parameters:  # パラメータを追加
      inventory:
        description: |
          Ansible inventory file.
        type: env_var_name
        default: ANSIBLE_INVENTORY_PATH
      private-key:
        description: |
          SSH private key file.
        type: env_var_name
        default: SSH_KEY_PATH
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Retrieve Public IP of EC2 Instance
          command: |
            PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name raise13-ec2 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text)
            echo "export INSTANCE_PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV
      - run:
          name: Prepare Ansible Inventory File
          command: |
            if [ -n "`echo $ANSIBLE_INVENTORY_PATH`" ]; then
              if [ ! -d ".ansible-playbook-circleci" ]; then
                mkdir .ansible-playbook-circleci
              fi
              if echo "$ANSIBLE_INVENTORY_PATH" | base64 -d > /dev/null 2>&1; then
                echo $ANSIBLE_INVENTORY_PATH | base64 -d > .ansible-playbook-circleci/inventory-file
              else
                echo "Invalid Base64 input for ANSIBLE_INVENTORY_PATH"
                exit 1
              fi
              echo "-i .ansible-playbook-circleci/inventory-file" > .ansible-playbook-circleci/inventory
            else
              if [ ! -d ".ansible-playbook-circleci" ]; then
                mkdir .ansible-playbook-circleci
              fi
              touch .ansible-playbook-circleci/inventory
            fi

      - ansible-playbook/install:  # ansible-playbook orbのinstall stepを利用
          version: '2.9.6'
      - ansible-playbook/playbook:  # ansible-playbook orbのplaybook stepを利用
          inventory: <<parameters.inventory>>
          playbook: ansible/picture_upload_play.yml
          private-key: <<parameters.private-key>>



workflows:
  version: 2
  deploy:
    jobs:
      - deploy-vpc
      - deploy-ec2:
          requires:
            - deploy-vpc
      - add-ssh-key:
          requires:
            - deploy-ec2
      - deploy-rds:
          requires:
            - add-ssh-key
      - deploy-alb:
          requires:
            - deploy-rds
      - deploy-s3:
          requires:
            - deploy-alb     
      - run-ansible:
          requires:
            - deploy-s3
